ディレクトリ構造・・・LinuxにはCドライブやDドライブという概念はなく、すべてディレクトリという単位でまとめて管理するしている。頂点をルートディレクトリとし、すべての親ディレクトリと表現することもある。それに連なるディレクトリは子ディレクトリして「/」で表記され、これらによってLinuxの階層構造が構成される。

パス・・・ディレクトリ構造を使ってファイルやディレクトリの位置を指定する方法。CLIで必要となる。　/usr/local/src/test.txt　のように指定する。「/」とはLinuxでのパス区切り文字で、windowsでは「￥」で表記される。ただし、Linuxの場合、先頭の「/」だけはルートディレクトリを表すもの。
※「/」「￥」のような区切り文字のことをデリミタという。日本語で「～の」と読み替えるとわかりやすい。

必ずルートディレクトリから記述している方法を絶対パス指定
カレントから考えて場所の指定をする方法を想定パス指定という。

カレントは「.」と「/」で表記する　例えばカレントが/usr/local/srcなら　./test.txtと表記できる。
※[./]は省略可能であるため、単にtest.txtと指定した場合には自動で./test.txtと読み替えられる。

「..」で一つ上のディレクトリを指定する。　例えば./../..ならカレントの二つ上



シェル・・・コマンドを実行するソフトウェアであり、LinuxのCUIの実態でもある。ユーザレベルでOSの機能を操作するS/W。ユーザとOSの間に立ち、ユーザの入力をOSに伝え、OSの処理の結果をユーザに伝える。カーネルとユーザを結ぶインタフェースのような役割をはたし、OSに対して伝える役割がある。実際のユーザの操作をコマンド実行というものになり。そのコマンドを入力、実行、結果の出力を行うのがシェルの大きな役割の一つ。

コマンドはシェルからOSの操作を行うための命令と例えることができ、コマンドをシェル上で実行することによってそのコマンドがLinuxに対して何らかの形で作用する。
GUIよりも煩雑に見えるが使いこなすと強力なインターフェースになる。

コマンドにはプロンプトが表示されている状態から入力する。仮に表示がなかったら何らかのコマンドが実行され続けているということ。
[user@hi～]$　　←これがプロンプト

コマンド入力には基本となるフォーマットが存在する
コマンド名[オプション...][引数(パラメータ)...]　　あくまで基本の一例のため、この形態にならないものも多く存在する
コマンドには基本的に1つの機能しかもっていない(UNIXの思想的に)。これに付加的な要素を加えるのがオプションの役割。

Linuxで利用されるコマンドのオプションには大きく3つの形式がある。

Unix98形式　　先頭にハイフン「ー」をつけて複数をまとめて指定する
BSD形式　　　　先頭に何もつけずに複数をまとめて指定する　
GNU形式　　　　先頭にハイフン２つ「ーー」つけて長い名前のオプションを指定

コマンドがある機能を実現するものならば、引数はそのコマンドを事項する対象ともいえる。引数の指定はする場合としない場合があるが、どういった引数を指定するかはコマンドに依存する。

[user@hi～]$ Is -I .bash_profile　
上記はIsというコマンドにUnix98形式のオプション-Iを指定し、引数に[.bash_profile]を与えている。コレは.bash_profileというファイルの表示を詳細に行うことを意味する。

コマンド実行のタイプは大きく３つに分けられる
Ａ．シェル自体に組み込まれている組み込みコマンド
Ｂ．環境変数PATHにパスが指定されているディレクトリ内の実行可能ファイル
Ｃ．パス指定(相対、絶対)を含む実行可能ファイル

Ａはシェル自体が内部的に持つ機能である組み込みコマンドを呼び出していることになる。[cd]などが代表
Ｂは環境変数PATHの情報をシェルが参照し、その中に設定されている場所から指定された実行可能ファイルを探し出して実行する。
Ｃは実行可能ファイルをパスを含む形で指定することによって、指定した場所の実行可能ファイルを実行することになる。
このことから、コマンドとは基本的にシェルの組み込みコマンドと実行可能ファイルの呼び出しの2系統のどちらかということになる。


シェルは上記のようなコマンドや基本機能だけではなく、ユーザの入力を手助けする機能がある。入力補完機能、入力履歴から再利用できる履歴機能。キーバインド機能など。これらによって習熟により操作性や速度などが変化していく。